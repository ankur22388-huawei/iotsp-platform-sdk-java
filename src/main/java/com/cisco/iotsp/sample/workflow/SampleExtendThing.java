//Copyright (c) 2016 by Cisco Systems, Inc. All rights reserved.
package com.cisco.iotsp.sample.workflow;

import java.io.File;
import javax.ws.rs.client.Client;
import javax.ws.rs.client.Entity;
import javax.ws.rs.core.HttpHeaders;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.Status;
import com.cisco.iotsp.client.schemas.SchemasApi;
import com.cisco.iotsp.client.schemas.model.Schema;
import com.cisco.iotsp.client.schemas.model.SchemaCreateRequest;
import com.cisco.iotsp.client.things.ThingsApi;
import com.cisco.iotsp.client.things.model.PageThing;
import com.cisco.iotsp.client.things.model.SectionSchemaPair;
import com.cisco.iotsp.client.things.model.Thing;
import com.cisco.iotsp.client.things.model.ThingCreateRequest;
import com.cisco.iotsp.client.things.model.ThingUpdateRequest;
import com.cisco.iotsp.helper.ClientHelper;
import com.cisco.iotsp.helper.JsonHelper;
import com.cisco.iotsp.helper.ServiceApiHelper;
import com.fasterxml.jackson.databind.ObjectMapper;

//This sample code shows how to extend device properties
public class SampleExtendThing {
	private ThingsApi thingApi;
	String serviceAddress;
	String token;

	public SampleExtendThing(String serviceAddr, String accessToken) {
		System.out.println(String.format("Sample client for extend device property at %s", serviceAddr));
		serviceAddress = serviceAddr;
		token = accessToken;
		thingApi = ServiceApiHelper.getThingsApi(serviceAddr, accessToken);
	}

	// Add new properties to device. The new properties syntax are defined in newSchemaFilePath.
	// The new property values are defined in thingDefFilePath
	public boolean mergeThing(String accountAlias) {
		try {
			String devManufacturingId = "a151c893-c7bc-48d6-8494-7e7775dcf3e5";
			String mergeThingFilePathInResources = "file/sampleThingMerge.json";
			String newSchemaFilePathInResources = "file/sampleSchemaLocation.json";
			
			//Create schema, that defines the syntax of device's new properties
			ObjectMapper mapper = new ObjectMapper();			
			SchemaCreateRequest schemaRequest = mapper.readValue(ClassLoader.getSystemResourceAsStream(newSchemaFilePathInResources), SchemaCreateRequest.class);
			SchemasApi apiSchema = ServiceApiHelper.getSchemasApi(serviceAddress, token);
			Schema newSchema = apiSchema.createSchema(schemaRequest);
			String newSchemaUid = newSchema.getUid(); 
			
			System.out.println("Sleep 1 second after create a new schema before use it to extend device properties, to avoid failure");
			Thread.sleep(1000);

			// Get things by a specific manufacture ID
			PageThing pageThingByManId = thingApi.getThings("uniqueIdentifiers.manufacturingId", devManufacturingId,
					"uniqueIdentifiers.manufacturingId", "Ascending", 100, 0);
			// Device manufacture Id is unique, so there should be only one device
			if (pageThingByManId == null || pageThingByManId.getItems() == null || pageThingByManId.getItems().size() != 1) {
				return false;
			}
			Thing origThing = pageThingByManId.getItems().get(0);
			String thingUid = origThing.getUid();
			
			
			//The generated client does not support PATCH. Directly call http for mergeThing
			String url = String.format("https://%s/v1/thing-services/things/%s", serviceAddress, thingUid);
			
			//The file thingFilePathInResources.json contains symbolic schema uid
			//Replace it with the newSchemaUid, that is generated by the system
			ThingUpdateRequest updateRequest = mapper.readValue(ClassLoader.getSystemResourceAsStream(mergeThingFilePathInResources), ThingUpdateRequest.class);
			for (SectionSchemaPair section : updateRequest.getSectionSchemas()) {
				section.setSchemaUid(newSchemaUid);
			}
			String input = mapper.writeValueAsString(updateRequest);
			
			//To send the HTTP PATCH via JAX RS Client API:
			Client client = ClientHelper.createClient();
			Response response = client.target(url)
										.request(MediaType.APPLICATION_JSON)
										.header(HttpHeaders.AUTHORIZATION, "Bearer " + token)
										.header(HttpHeaders.CONTENT_TYPE, "application/json")
										.header(HttpHeaders.ACCEPT, "application/json")	
										.build("PATCH", Entity.entity(input, MediaType.APPLICATION_JSON))
										.invoke();

			if (response.getStatusInfo().getFamily().equals(Status.Family.SUCCESSFUL)) {
				System.out.printf("\n--- mergeThing is successful. --- \n");
				System.out.printf("\n the original thing is: \n %s\n", origThing.toString());
				String newThingJson = response.readEntity(String.class);
				System.out.printf("\n the new thing is: \n%s\n", newThingJson);
				return true;
			} else {
				System.out.printf("\n--- mergeThing failed !!! ---\n");
				System.out.printf("response status: %d --- \n", response.getStatus());
				System.out.printf("Headers: %s\n", response.getHeaders());
				System.out.printf("response is: %s\n ", response);
				return false;
				}
			
		} catch (com.cisco.iotsp.client.schemas.ApiException schemaE) {
			System.out.printf("\n--- createSchema failed !!! ---");
			System.out.printf("\ncode=%d\n msg=%s\n header=%s\n body=%s\n", schemaE.getCode(), schemaE.getMessage(),
					schemaE.getResponseHeaders(), schemaE.getResponseBody());
			System.out.println(schemaE);
			schemaE.printStackTrace();
			return false;
		} catch (com.cisco.iotsp.client.things.ApiException apiE) {
			System.out.printf("\n--- mergeThing failed !!! ---");
			System.out.printf("\ncode=%d\n msg=%s\n header=%s\n body=%s\n", apiE.getCode(), apiE.getMessage(),
					apiE.getResponseHeaders(), apiE.getResponseBody());
			System.out.println(apiE);
			apiE.printStackTrace();
			return false;
		} catch (Exception e) {
			System.out.printf("\n--- mergeThing failed !!! ---");
			System.out.println(e);
			System.out.println(e.getMessage());
			e.printStackTrace();
			return false;
		}
	}

	// Update device with new properties. The new properties syntax are defined in newSchemaFilePath.
	// The new property values are defined in thingDefFilePath
	public boolean updateThing(String accountAlias) {
		try {
			String devManufacturingId = "a151c893-c7bc-48d6-8494-7e7775dcf3e5";
			String updateThingFilePathInResources = "file/sampleThingUpdate.json";
			String newSchemaFilePathInResources = "file/sampleSchemaLocation.json";

			//Create schema, that defines the syntax of device's new properties
			ObjectMapper mapper = new ObjectMapper();			
			SchemaCreateRequest schemaRequest = mapper.readValue(ClassLoader.getSystemResourceAsStream(newSchemaFilePathInResources), SchemaCreateRequest.class);
			SchemasApi apiSchema = ServiceApiHelper.getSchemasApi(serviceAddress, token);
			Schema newSchema = apiSchema.createSchema(schemaRequest);
			String newSchemaUid = newSchema.getUid(); 
			
			System.out.println("Sleep 1 second after create a new schema before use it to extend device properties, to avoid failure");
			Thread.sleep(1000);

			// Get things by a specific manufacture ID
			PageThing pageThingByManId = thingApi.getThings("uniqueIdentifiers.manufacturingId", devManufacturingId,
					"uniqueIdentifiers.manufacturingId", "Ascending", 100, 0);

			// Device Manufacturing Id is unique, so there should be only one device
			if (pageThingByManId == null || pageThingByManId.getItems() == null
					|| pageThingByManId.getItems().size() != 1) {
				return false;
			}
			Thing thing = pageThingByManId.getItems().get(0);
			String thingUid = thing.getUid();

			ThingUpdateRequest thingUpdateRequest = mapper.readValue(ClassLoader.getSystemResourceAsStream(updateThingFilePathInResources), ThingUpdateRequest.class);
			for (SectionSchemaPair section : thingUpdateRequest.getSectionSchemas()) {
				String schemaUid =  section.getSchemaUid().replaceFirst("accountAlias", accountAlias);	
				section.setSchemaUid(schemaUid);
			}
			
			Thing updatedThing = thingApi.updateThing(thingUid, thingUpdateRequest);
			System.out.printf("\n--- updateThing succeed !!! ---");
			System.out.printf("\n original thing:\n %s", thing);
			System.out.printf("\n updated thing is: \n %s", updatedThing);
			return true;
			
		} catch (com.cisco.iotsp.client.schemas.ApiException schemaE) {
			System.out.printf("\n--- createSchema failed !!! ---");
			System.out.printf("\ncode=%d\n msg=%s\n header=%s\n body=%s\n", schemaE.getCode(), schemaE.getMessage(),
					schemaE.getResponseHeaders(), schemaE.getResponseBody());
			System.out.println(schemaE);
			schemaE.printStackTrace();
			return false;
		} catch (com.cisco.iotsp.client.things.ApiException apiE) {
			System.out.printf("\n--- updateThing failed !!! ---");
			System.out.printf("\ncode=%d\n msg=%s\n header=%s\n body=%s\n", apiE.getCode(), apiE.getMessage(),
					apiE.getResponseHeaders(), apiE.getResponseBody());
			System.out.println(apiE);
			apiE.printStackTrace();
			return false;
		} catch (Exception e) {
			System.out.printf("\n--- updateThing failed !!! ---");
			System.out.println(e);
			System.out.println(e.getMessage());
			e.printStackTrace();
			return false;
		}
	}
}
